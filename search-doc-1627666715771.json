[{"title":"Modal Sizing","type":0,"sectionRef":"#","url":"blog/mainsail-modal-tip","content":"Modal sizing is primarily controlled by content. This means you only need to concern yourself with the size of the body. As such, it includes an optional prop called bodyWidth (and bodyHeight though rarely needed) that supports passing an array of sizes in for the 3 breakpoints we use in our app. ‚ö°Ô∏è See a demo of a responsive Modal setup here on Stackblitz.","keywords":""},{"title":"Mainsail 1.5.0 is released","type":0,"sectionRef":"#","url":"blog/mainsail-release-150","content":"","keywords":""},{"title":"New","type":1,"pageTitle":"Mainsail 1.5.0 is released","url":"blog/mainsail-release-150#new","content":"Switcher - Easily animate transitions between views - See the docs or a Stackblitz live sandbox "},{"title":"Fixes & Improvements","type":1,"pageTitle":"Mainsail 1.5.0 is released","url":"blog/mainsail-release-150#fixes--improvements","content":"Modal - Adds new props bodyWidth and bodyHeight that accept responsive arrays to more easily control modal's in a responsive way per specModal - fixes multiple style issues, updates multi-step story example with new Switcher componentMoar Icons - adds a plethora of new text editor icons ‚Äî thanks @christianpatrick! "},{"title":"Documentation Additions","type":1,"pageTitle":"Mainsail 1.5.0 is released","url":"blog/mainsail-release-150#documentation-additions","content":"Adds Animating Mainsail mini guide "},{"title":"Mainsail 1.7.0 is released","type":0,"sectionRef":"#","url":"blog/mainsail-release-170","content":"","keywords":""},{"title":"New","type":1,"pageTitle":"Mainsail 1.7.0 is released","url":"blog/mainsail-release-170#new","content":"Progress - Easily configurable, subtly animated progress bar component. "},{"title":"Fixes & Improvements","type":1,"pageTitle":"Mainsail 1.7.0 is released","url":"blog/mainsail-release-170#fixes--improvements","content":"Badge - fixes a rounded style issueModal - fixes multiple modal portal wrappers using same idModal - fixes multiple style issuesUtility CSS - margin now can utilize -auto with ml, mr and mxTimepicker - adds multi-modifier support for TimePicker to configure dropdowns independentlyTimepicker - adds extra period controls (hiding of period dropdown) "},{"title":"Mainsail 1.2.0 is released","type":0,"sectionRef":"#","url":"blog/mainsail-release-120","content":"","keywords":""},{"title":"Fixes & Improvements","type":1,"pageTitle":"Mainsail 1.2.0 is released","url":"blog/mainsail-release-120#fixes--improvements","content":"Modal - Adds data-testid to modal for easier test handling of modal parts :test_tube:Visibility Utility Classes - Adds css utility class for sm:visible md:visible and lg:visible to handle showing/hiding more easily üëÄButton - fixes button padding not able to be overridden by css utility classesButton - fixes passing icon to button as a functionTypography Utility Classes - adds label-text and button-text classes per our figma specsSizing Utility Classes - adds some basic helpers for width/height control (including w-screen & h-screen to support full screen backgrounds more easily)Spacing Utility Classes - adds 2 more units to the spacing scale so margins so if you need to bump something by 2px or 6px, it's baked-in to margin and padding utilities.PopMenu/Item - Adds support for color and icon usage on items, adds padding prop support, adds menu header support "},{"title":"Documentation Additions","type":1,"pageTitle":"Mainsail 1.2.0 is released","url":"blog/mainsail-release-120#documentation-additions","content":"Adds Form Fields guide All the aforementioned Utility Class improvements are now documented "},{"title":"Icon Coloring Tip","type":0,"sectionRef":"#","url":"blog/mainsail-icon-tip","content":"When using the new <Icon /> from Mainsail-ui, you may find a special edge case that needs a different color than the 3 blues available from the color prop. You're in luck, because className works as an escape hatch with our CSS Utility Class colors for text. // Only offers 3 choices (light, default, dark), that cover most implementations<Icon color=\"light\" name=\"delete\"/> // Use a css utility class instead, will override the svg's color<Icon className=\"text-red-dark\" name=\"delete\"/> Copy Because sometimes you just need a red trash can.","keywords":""},{"title":"Corner Radius","type":0,"sectionRef":"#","url":"docs/css/corner-radius","content":"Corner Radius Apply Mainsail corner radius via the border-radius: css property. Uses the syntax rounded-<amount>. Amount\tPixelsrounded (no amt)\t4px 4\t4px 8\t8px 10\t10px 20\t20px rounded-4 rounded-8 rounded-10 rounded-20","keywords":""},{"title":"Sizing","type":0,"sectionRef":"#","url":"docs/css/sizing","content":"Sizing These sizing utilities are not meant to be a replacement for AutoGrid or Flex components. Note: At this time, responsive utilities do not exist for this because AutoGrid/Flex components can control sizing at breakpoints. Class\tAmountw-screen\t100vw w-full\t100% w-3/4\t75% w-1/2\t50% w-1/4\t25% w-1/3\t33.33% w-2/3\t66.66% h-screen\t100vh h-full\t100% w-full w-3/4 w-1/2 w-1/4","keywords":""},{"title":"Overlays","type":0,"sectionRef":"#","url":"docs/css/overlays","content":"","keywords":""},{"title":"Overlay","type":1,"pageTitle":"Overlays","url":"docs/css/overlays#overlay","content":"This example contains an content-overlay that spans the full ranges of its parent. Lorem ipsum dolor sit amet consectetur adipisicing elit. Corrupti fugiat fugit, harum neque eum dolorem maiores sint mollitia optio dicta! "},{"title":"Blur","type":1,"pageTitle":"Overlays","url":"docs/css/overlays#blur","content":"This example contains a content-blur that blurs all the children. Lorem ipsum dolor sit amet consectetur adipisicing elit. Corrupti fugiat fugit, harum neque eum dolorem maiores sint mollitia optio dicta! "},{"title":"CSS Utilities","type":0,"sectionRef":"#","url":"docs/css/utility-classes","content":"","keywords":""},{"title":"Why Utility Classes?","type":1,"pageTitle":"CSS Utilities","url":"docs/css/utility-classes#why-utility-classes","content":"Adding bespoke CSS per component for things that are constantly repeated adds to the \"append-only\" nature and unnecessary size of our CSS footprint. Applying the 80/20 principle, having these classes available helps us to get the 80% done with 20% of the code. (Where the 80% is common use cases for positioning, layout and style ... and the 20% can likely be reused throughout the app.) "},{"title":"Eww, how are these better than inline styles?","type":1,"pageTitle":"CSS Utilities","url":"docs/css/utility-classes#eww-how-are-these-better-than-inline-styles","content":"Utility classes are a fairly common styling pattern that offers many benefits over inline styles. The utilities listed on this page are modeled after the very popular Tailwind CSS. There are a number of differences, however. For example, not everything has responsive class designations baked-in. Mainsail only includes a small subset of the abilities of Tailwind to save on bundle size. "},{"title":"Making Progress","type":0,"sectionRef":"#","url":"blog/mainsail-progress-tip","content":"","keywords":""},{"title":"Colors","type":1,"pageTitle":"Making Progress","url":"blog/mainsail-progress-tip#colors","content":"The Progress bar comes in a few default color options. import { Progress } from \"mainsail-ui\"; // These colors match a similar convention to the Icon coloring<ProgressBar percentage={55} color=\"default\" /><ProgressBar percentage={55} color=\"dark\" /><ProgressBar percentage={55} color=\"light\" /> Copy "},{"title":"Color Customization and More","type":1,"pageTitle":"Making Progress","url":"blog/mainsail-progress-tip#color-customization-and-more","content":"The main goal was to present a fully configurable bar and wrapper. This can be configured 100% by way of utility classes via the two props className and classNameBar. info This prop naming may seem odd at first. Mainsail strives for broad -> narrow specificity in naming conventions and also tries to maintain alpha sortable props. Size, borders, height and color can all be modified via these utility classes included with Mainsail. <ProgressBar percentage={99} // The wrapper class className=\"bg-white border-blue-primary\" // The inner bar - the part that moves classNameBar=\"bg-blue-primary pt-20\"/> Copy "},{"title":"Playground","type":1,"pageTitle":"Making Progress","url":"blog/mainsail-progress-tip#playground","content":"Feel free to check out all the potential in this playground here.  "},{"title":"Shadows","type":0,"sectionRef":"#","url":"docs/css/shadows","content":"Shadows Box shadows and overlay can be applied easily with the shadow utility classes. <div className=\"box-shadow-near\">Box Shadow Near</div><div className=\"box-shadow-far\">Box Shadow Far</div><div className=\"box-shadow-sticky\">Box Shadow Sticky Bar</div> Copy Box Shadow Near Box Shadow Far Box Shadow Sticky Bar","keywords":""},{"title":"Visibility","type":0,"sectionRef":"#","url":"docs/css/visibility","content":"Visibility Resize the browser to see these utility classes at work. Visible at Specific Breakpoints sm:visible md:visible lg:visible Hidden at Specific Breakpoints sm:hidden (shown at everything but sm) md:hidden (shown at everything but md) lg:hidden (shown at everything but lg) These work according to the following chart:Class specifier\tPixelssm:visible\tVisible only at sm- md:visible\tVisible only at md lg:visible\tVisible only at lg+ sm:hidden\tHides at sm- md:hidden\tHides at md lg:hidden\tHides at lg+ While a few hiding (display: none) helpers exist (shown above), you may be better suited to conditionally unmount components at breakpoints using a useBreakpoint hook . tip Note: import { useBreakpoint } from \"mainsail-ui\" ‚Äî This hook can be used to provide responsive reactivity in JS components, but should be used at a higher level if possible because it responds to window resizing and should be used sparingly.","keywords":""},{"title":"Adding Icons","type":0,"sectionRef":"#","url":"docs/development/add-icons","content":"","keywords":""},{"title":"Follow the Steps","type":1,"pageTitle":"Adding Icons","url":"docs/development/add-icons#follow-the-steps","content":"If you need to add an icon (or icons) to the mainsail-ui icon set, follow the steps below. Add your icon svg from figma to the src/assets/icons/your-new-icon.svg folder. This folder contains all original icon source filesDo not edit these files, SVGR will process these on every icon build runSVGR will replace any primary blue with currentColor for easier css styling Run yarn build-icons from the command line (project root) This step creates the necessary react icon component files (src/components/icons/your-new-icon.js) and exports them in the necessary files Run yarn scaffold icons Enter the name of the icon (or icons)Use a space delimited snake_case format (ex. warning folder_fill trash help)This will then generate the necessary prop names for Icon.js and additional needed exports "},{"title":"Check & Review","type":1,"pageTitle":"Adding Icons","url":"docs/development/add-icons#check--review","content":"After these steps, be sure to run Storybook and determine your icon is present and configurable in the proper manner (i.e. color, size etc) Note: The scaffolding process does not account for alphabetizing icon names so it will inject the new icon names into components/Icon.js at the top, Icon List Story will sort them using .sort() "},{"title":"Create a PR!","type":1,"pageTitle":"Adding Icons","url":"docs/development/add-icons#create-a-pr","content":"If your icon is working in Storybook, you're done! Push that puppy up! üöÄ "},{"title":"Colors","type":0,"sectionRef":"#","url":"docs/css/colors","content":"","keywords":""},{"title":"Background Colors","type":1,"pageTitle":"Colors","url":"docs/css/colors#background-colors","content":"Applies Mainsail color to background background-color: css property. Uses the syntax bg-<color>-<variant>. bg-blue-primary bg-blue-light bg-blue-middle bg-blue-dark bg-green-light bg-green-middle bg-green-dark bg-violet-light bg-violet-middle bg-violet-dark bg-orange-light bg-orange-middle bg-orange-dark bg-red-light bg-red-middle bg-red-dark bg-pink-light bg-pink-middle bg-pink-dark bg-neutral-1 bg-neutral-2 bg-neutral-3 bg-neutral-4 bg-neutral-5 bg-neutral-6 bg-white "},{"title":"Text Colors","type":1,"pageTitle":"Colors","url":"docs/css/colors#text-colors","content":"Apply Mainsail color to text color: css property. Uses the syntax text-<color>-<variant>. text-blue-primary text-blue-light text-blue-middle text-blue-dark text-green-light text-green-middle text-green-dark text-violet-light text-violet-middle text-violet-dark text-orange-light text-orange-middle text-orange-dark text-red-light text-red-middle text-red-dark text-pink-light text-pink-middle text-pink-dark text-neutral-1 text-neutral-2 text-neutral-3 text-neutral-4 text-neutral-5 text-neutral-6 text-white "},{"title":"Border Colors","type":1,"pageTitle":"Colors","url":"docs/css/colors#border-colors","content":"Apply Mainsail border and color to text color: css property. Uses the syntax text-<color>-<variant>. border-blue-primary border-blue-light border-blue-middle border-blue-dark border-green-light border-green-middle border-green-dark border-violet-light border-violet-middle border-violet-dark border-orange-light border-orange-middle border-orange-dark border-red-light border-red-middle border-red-dark border-pink-light border-pink-middle border-pink-dark border-neutral-1 border-neutral-2 border-neutral-3 border-neutral-4 border-neutral-5 border-neutral-6 "},{"title":"Configuring Your Editor","type":0,"sectionRef":"#","url":"docs/development/editor-config","content":"","keywords":""},{"title":"Setup for VS Code","type":1,"pageTitle":"Configuring Your Editor","url":"docs/development/editor-config#setup-for-vs-code","content":"Once you run yarn install on the project, you should have the necessary linters and plugins for the project but you will still need to install the editor plugins to enable operation during editing. "},{"title":"Install the Editor Plugins","type":1,"pageTitle":"Configuring Your Editor","url":"docs/development/editor-config#install-the-editor-plugins","content":"ESlint Plugin: recommended for linting VS Code.Prettier Plugin: recommended for format on save functionality.Jest Plugin: recommended for inline test running Once installed (an app restart may be necessary), you should see linting take place inline and this can also be confirmed by opening your terminal with ctrl + ~ and you should see the PROBLEMS tab display output (if there's an actual issue). You can test this by naming a prop wrong (see previous screen). Example  Inline Example Boolean prop type naming is enforced by eslint.  Also using the official Jest plugin will give you the ability to run your <component>.test.jsfiles inline while coding without having to do any extra effort. This will result in highlighting any failures on the fly.   Troubleshooting üö® "},{"title":"I've got nothing going on (ESLINT / PRETTIER)","type":1,"pageTitle":"Configuring Your Editor","url":"docs/development/editor-config#ive-got-nothing-going-on-eslint--prettier","content":"Did you install the plugin for VS Code? If you have any issues seeing linting support during your editor workflow, check the OUTPUT tab in the VS Coded Terminal as it will usually display any conflicts and issues that arise.  Is the installed (and enabled plugin) set to run onType or onSave?  "},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Usage","type":1,"pageTitle":"Introduction","url":"docs/intro#usage","content":"Add Mainsail to your project ‚õµÔ∏è This section contains useful information pertinent to implementing Mainsail along with guides and tutorials for more intricate parts. "},{"title":"Development","type":1,"pageTitle":"Introduction","url":"docs/intro#development","content":"Start building components in Mainsail üî® When you need to build a component or add to Mainsail UI, this is the place to come to. "},{"title":"CSS","type":1,"pageTitle":"Introduction","url":"docs/intro#css","content":"CSS utilities and styling üé® When you need to tweak styling for a component or shape some things outside the component library. "},{"title":"Guides","type":1,"pageTitle":"Introduction","url":"docs/intro#guides","content":"Dig deeper into Mainsail components üß† Detailed deep-dives for specific components and features. "},{"title":"Spacing","type":0,"sectionRef":"#","url":"docs/css/spacing","content":"","keywords":""},{"title":"Available Sizing Scale","type":1,"pageTitle":"Spacing","url":"docs/css/spacing#available-sizing-scale","content":"Class specifier\tPixels0\t0px 2\t2px 4\t4px 6\t6px 8\t8px 10\t10px 12\t12px 15\t15px 16\t16px 20\t20px 30\t30px 48\t48px "},{"title":"Margins","type":1,"pageTitle":"Spacing","url":"docs/css/spacing#margins","content":"Explicit directional margin/padding can be applied by adding a t/b/l/r designation to the class. E.g. mr-8 will apply margin-right: 8px and ml-8 will apply margin-left: 8px. If desired, you can supply x or y to apply to both sides. Examples // Using margin utility with 8px of top margin<Button className=\"mt-8\" text=\"Cancel\" /> // Using margin utility with 8px of top and 20px of left/right margin<Button className=\"mt-8 mx-20\" text=\"Confirm\"/> Copy Margin Top mt-4 mt-8 mt-10 mt-12 mt-15 mt-16 mt-20 mt-30 mt-48 "},{"title":"Space Between","type":1,"pageTitle":"Spacing","url":"docs/css/spacing#space-between","content":"If you need to quickly apply some in-between spacing in a simple way use, space-y-<amount> and space-x-<amount> (where amount is an integer in the table above) on a parent item. This adds margin to all but the first item of children. If you have complex scenarios, reach for AutoGrid. This example uses space-y-12 for automatic vertical spacing. This example uses space-x-12 for automatic horizontal spacing. caution No responsive features exist for the space- utility at this time. Beware of wrapping elements. "},{"title":"Responsive Spacing & Hiding","type":1,"pageTitle":"Spacing","url":"docs/css/spacing#responsive-spacing--hiding","content":"Responsive designations for spacing can be applied. The syntax looks like <breakpoint>:<class> <div className=\"bg-blue-light p-8 sm:mt-8 md:mt-20 lg:mt-30\">mt-48</div> Copy Margin with 8px at small, 20px at medium and 30 at large (resize browser window to see) Small and under mt-8Medium breakpoints only mt-20Large and up mt-30 "},{"title":"Getting Started (Ex Nihilo)","type":0,"sectionRef":"#","url":"docs/development/getting-started","content":"","keywords":""},{"title":"Environment Setup","type":1,"pageTitle":"Getting Started (Ex Nihilo)","url":"docs/development/getting-started#environment-setup","content":"Clone the repo git clone git@github.com:BreezeChMS/mainsail-ui.git Copy Install the depenedencies cd mainsail-ui yarn install Copy Start Storybook yarn start Copy You should now have storybook running with a message in your terminal similar to: ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ‚îÇ ‚îÇ‚îÇ Storybook 6.2.5 started ‚îÇ‚îÇ 9.03 s for preview ‚îÇ‚îÇ ‚îÇ‚îÇ Local: http://localhost:6006/ ‚îÇ‚îÇ On your network: http://192.168.1.36:6006/ ‚îÇ‚îÇ ‚îÇ‚îÇ Read full changelog: https://git.io/fhFYe ‚îÇ‚îÇ ‚îÇ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ Copy "},{"title":"Project Overview","type":1,"pageTitle":"Getting Started (Ex Nihilo)","url":"docs/development/getting-started#project-overview","content":"There are two primary portions of the Mainsail-UI dev environment. Storybook - internally bundled by WebpackReact Component development - bundled by Rollup What's in the src folder?# The majority of the development of components will take place in the src folder. src‚îú‚îÄ assets| ‚îú‚îÄ fonts (for use locally in storybook - not bundled)| ‚îî‚îÄ icons (original source svgs - has icon build process)‚îú‚îÄ components‚îú‚îÄ docs (for storybook documentation only)‚îú‚îÄ styles (global scss files)| ‚îú‚îÄ Colors.scss (color-related configurations)| ‚îú‚îÄ Layout.scss (utility classes for spacing/layout)| ‚îú‚îÄ Reset.scss (a reset used in storybook rendering)| ‚îú‚îÄ Text.scss (text-related configurations)| ‚îú‚îÄ Utility.scss (mixins used throughout scss)| ‚îî‚îÄ Variables.scss(all global scss variables) Copy "},{"title":"Configure Your Editor","type":1,"pageTitle":"Getting Started (Ex Nihilo)","url":"docs/development/getting-started#configure-your-editor","content":"The next big step requires its own section and comes highly recommended if you want the best development experience. See Configuring Your Editor Note: Currently only VS Code instructions exist. If plugins exist for your preferred editor, please submit a PR to update these docs. "},{"title":"Review Some Project Design Decisions","type":1,"pageTitle":"Getting Started (Ex Nihilo)","url":"docs/development/getting-started#review-some-project-design-decisions","content":"Before you start contributing any new code, review our conventions. See Coding Style Guide "},{"title":"Using Storybook","type":0,"sectionRef":"#","url":"docs/guides/using-storybook","content":"","keywords":""},{"title":"Key Highlights","type":1,"pageTitle":"Using Storybook","url":"docs/guides/using-storybook#key-highlights","content":""},{"title":"Canvas vs Docs","type":1,"pageTitle":"Using Storybook","url":"docs/guides/using-storybook#canvas-vs-docs","content":" The Canvas and Docs tabs are your main navigation inside a particular component. Canvas is useful for testing the workings of the component on the whole. Visual tweaks, viewport behavior, props and actions are all available from this tab. Docs should be visited but probably not relied upon for testing the prop usage and controls because it's easier to anchor on a specific story first, then test those props inside the Canvas tab.  "},{"title":"Controls vs Actions","type":1,"pageTitle":"Using Storybook","url":"docs/guides/using-storybook#controls-vs-actions","content":" Controls will give you a list of all the props that a component has been defined with (depending on how the story has been set up, it can be controlled with the live example from this panel) A Note on Controls: Controls can be included or ignored in story setup. They can also be preset with anything defined as a prop value. This means the initial control for a prop may or may not be the actual default value for that prop (which would be defined under the default column) Actions if wired up properly in the story, this tab will give a glimpse into the callbacks and functions that fire when certain actions are acted upon in the component.  "},{"title":"ViewPort Testing","type":1,"pageTitle":"Using Storybook","url":"docs/guides/using-storybook#viewport-testing","content":" Only available under the Canvas Tab of a story, you can test different viewport responsiveness with this button. Size\tBreakpointSmall Mobile\tsm Large Mobile\tsm Tablet\tmd none\tlg "},{"title":"Typography","type":0,"sectionRef":"#","url":"docs/css/typography","content":"","keywords":""},{"title":"Headings","type":1,"pageTitle":"Typography","url":"docs/css/typography#headings","content":"Example <h1>Hello World Hero</h1><h2>Hello World H2</h2><h3>Hello World H3</h3><h4>Hello World H4</h4> Copy Hello World Hero Hello World H2 Hello World H3 Hello World H4 info You may also use .h1, .h2, .h3, .h4 classes when needed "},{"title":"Body text","type":1,"pageTitle":"Typography","url":"docs/css/typography#body-text","content":"4 sizes of body text exist: lg, md (default), sm and xs. Example <p className=\"body-text lg\"> Lorem ipsum, dolor sit amet consectetur adipisicing elit. Rem, accusamus.</p> <p className=\"body-text md\"> Lorem ipsum, dolor sit amet consectetur adipisicing elit. Rem, accusamus.</p> <p className=\"body-text sm\"> Lorem ipsum, dolor sit amet consectetur adipisicing elit. Rem, accusamus.</p> <p className=\"body-text xs\"> Lorem ipsum, dolor sit amet consectetur adipisicing elit. Rem, accusamus.</p> Copy Lorem ipsum, dolor sit amet consectetur adipisicing elit Lorem ipsum, dolor sit amet consectetur adipisicing elit Lorem ipsum, dolor sit amet consectetur adipisicing elit Lorem ipsum, dolor sit amet consectetur adipisicing elit "},{"title":"Label text","type":1,"pageTitle":"Typography","url":"docs/css/typography#label-text","content":"1 size of label text exists:sm. caution This is a text style for labeling UI content and not specifically for <label/> elements Example <span className=\"label-text sm text-neutral-3\">Labeling Text</span> Copy Labeling Text "},{"title":"Button text","type":1,"pageTitle":"Typography","url":"docs/css/typography#button-text","content":"2 sizes of button text exist: md & sm (md can be omitted). Example <p className=\"button-text text-neutral-2\">Button Text</p><p className=\"button-text sm text-neutral-2\">Button Text</p> Copy Regular Button Text Small Button Text "},{"title":"Forms","type":0,"sectionRef":"#","url":"docs/guides/forms","content":"","keywords":""},{"title":"What Mainsail can do for your forms","type":1,"pageTitle":"Forms","url":"docs/guides/forms#what-mainsail-can-do-for-your-forms","content":"Offers per-spec, pre-styled form inputs and field options (no styling necessary)Assists with responsive layout (via AutoGrid)Aims to include most accessibility roles and features out of the box (less wiring necessary)Offers a clean wrapper <FormControl/> that will provide disabled/invalid state down to its children (less wiring necessary) "},{"title":"What Mainsail doesn't do for you","type":1,"pageTitle":"Forms","url":"docs/guides/forms#what-mainsail-doesnt-do-for-you","content":"Maintain form stateControl validation "},{"title":"The Base Components","type":1,"pageTitle":"Forms","url":"docs/guides/forms#the-base-components","content":"info For deeper info on each, visit the various stories in Storybook for each Component. FormControl - the parent wrapper, provides isInvalid isDisabled, and more to children automatically; also supports AutoGrid featuresCheckbox - an individual checkbox with a text labelCheckboxGroup - a group of checkboxes (to be used inside a FormControl)Dropdown - a multiple choice dropdownFormHelpText - the little helpful bits of text that sit neatly under an inputFormInputIcon - an icon that gets situated inside an <Input/> field with proper focus/disabled styling applied for youFormInputOptions - the parent wrapperFormLabel - the text that labels a field for visual and accessibility purposes (no wiring necessary when paired inside a FormControl)Button - the ubiquitous button, also useful in formsInput - the universal <input/> field, styled per spec and ready to gain the perks of FormControlDatePicker (Native) - an available styled NATIVE date picker - likely to be used in mobile situations, react-datepicker support inside FormControl exists as wellRadio - a simple radio buttonRadioGroup - a group of simple radio buttonsTextarea - a section for multi-line input of textTimePicker - a pre-styled dropdown for picking times, can be provided a list of times "},{"title":"Let's Layout Some Fields","type":1,"pageTitle":"Forms","url":"docs/guides/forms#lets-layout-some-fields","content":"It all starts with a FormControl. This portion of your form field handles the following: invalid state and styleinvalid input errorsdisabled state and stylereadonly state and stylerequired state and styleautomatically links ids between labels and inputs for accessibility <FormControl> <FormLabel text=\"Email\" invalidText=\"You must provide a username\" /> <Input type=\"email\" value=\"\" /> <FormInputIcon name=\"email\" /></FormControl> Copy Play around with a simple example here:  Adding invalid state# It's easy to add invalid state and error text to the entire field by supplying isInvalid and whatever invalidText is necessary. Try adding isInvalid as a prop to FormControl component the editor above. (Tip: you don't need to actually supply a boolean, isInvalid is enough.) Adding disabled state# It's easy to add invalid state and error text to the entire field by supplying isDisabled. Try adding isDisabled as a prop to FormControl component the editor above. (Tip: you don't need to actually supply a boolean, isDisabled is enough.) "},{"title":"Accessibility","type":1,"pageTitle":"Forms","url":"docs/guides/forms#accessibility","content":"You don't need to wire up your labels with your inputs when using FormControl. This is handled for you under the hood. You can see this by clicking the FormLabel in the stackblitz example above. Notice that the focus gets directed to the proper input (or inspect the elements to see something similar to this screenshot).  "},{"title":"Columns and Layout","type":1,"pageTitle":"Forms","url":"docs/guides/forms#columns-and-layout","content":"<FormControl/> pairs well with AutoGrid. And since AutoGrid is flexible enough to nest as needed. You can position and layout rows and columns in flexible ways that support automatic responsive behaviors with little effort. The props colSpan is supported natively on the FormControl for use inside AutoGrid. This allows you it to declare its own number of columns that it should stretch across. Alternatively, you could use parent AutoGrid components to control spanning and column handling. In the stackblitz example above, we could just as easily take the parent AutoGrid and nest it inside something like this: <AutoGrid cols={12} className=\"w-full\"> ...</AutoGrid> Copy This would provide a grid that offers 12 columns across the entire width of the page (parent). This, then affords you the ability to start specifying where you want to start the form to start on the horizontal axis with colStart and colEnd props on the parent. See the Advanced Grid Form demo for more details on this technique. "},{"title":"Animating Things","type":0,"sectionRef":"#","url":"docs/guides/animating-mainsail","content":"","keywords":""},{"title":"Transition","type":1,"pageTitle":"Animating Things","url":"docs/guides/animating-mainsail#transition","content":"Uses React Transition Group under the hood for easily customizable, css-based animationsUseful for enter and exit animationsUnmounts a component when animation is done (by default - is configurable)Allows for animation lifecycle callbacks - call a function when things start or are finished! <Transition animation={\"fade\"} isActive={true} shouldAnimateOnMount> <div>Look ma, I fade in/out</div></Transition> Copy "},{"title":"How to get it moving","type":1,"pageTitle":"Animating Things","url":"docs/guides/animating-mainsail#how-to-get-it-moving","content":"isActive is the prop that triggers the enter/exit animation to start. "},{"title":"Switcher","type":1,"pageTitle":"Animating Things","url":"docs/guides/animating-mainsail#switcher","content":""},{"title":"Why use <Switcher/>?","type":1,"pageTitle":"Animating Things","url":"docs/guides/animating-mainsail#why-use-switcher","content":"Automatically wraps any child element with <Transition/>Directionally transitions between children (e.g. sliding Forwards/Backwards depending on direction of movement)Easier state management with the included useSwitcher hook "},{"title":"The useSwitcher Hook","type":1,"pageTitle":"Animating Things","url":"docs/guides/animating-mainsail#the-useswitcher-hook","content":"This hook exists solely as a convenience to manage all the state needed for the Switcher component. import { Switcher, useSwitcher } from \"mainsail-ui\"; const { previousView, currentView, previousAnim, nextAnim, setView,} = useSwitcher({ // Just providing some initial config defaults to the hook currentView: 1, // starting view nextAnim: \"fade-slide-left\", // animation for moving to next item previousAnim: \"fade-slide-right\", // animation for moving to previous item}); // Here's the actual switcher (taken from the Switcher Basic story) // The parent of a Switcher needs to be position: relative,// if you desire the switcher to take up the full width/height of the parent // In this example, the parent is set to a width of 50% and full height of the viewport using Mainsail utility classes <div className=\"relative w-1/2 h-screen\"> <Switcher currentView={currentView} previousView={previousView} previousAnim={previousAnim} nextAnim={nextAnim}> <div data-testid=\"view-1\" className=\"p-20 w-full h-full bg-blue-light\"> <h3>View 1</h3> <p> Lorem ipsum dolor sit amet consectetur adipisicing elit. Blanditiis, ipsam. Itaque animi et odio? Cum, nihil officia. Sint, perspiciatis fugiat? </p> </div> <div data-testid=\"view-2\" className=\"p-20 w-full h-full bg-red-light\"> <h3>View 2</h3> <p> Lorem ipsum dolor sit amet consectetur adipisicing elit. Blanditiis, ipsam. Itaque animi et odio? Cum, nihil officia. Sint, perspiciatis fugiat? </p> </div> <div data-testid=\"view-3\" className=\"p-20 w-full h-full bg-green-light\"> <h3>View 3</h3> <p> Lorem ipsum dolor sit amet consectetur adipisicing elit. Blanditiis, ipsam. Itaque animi et odio? Cum, nihil officia. Sint, perspiciatis fugiat? </p> </div> </Switcher></div>; Copy After the setup above, setView() method returned from the useSwitcher() hook, is the only method needed to change views (with transitions!). // Will transition the view to the second child of SwitchersetView(2); Copy caution Switcher will automatically try to take up all the available space of a position: relative parent (this can be overridden via sizing props or css)The parent will need explicit dimensions of some kind (for example, a min-height). For more information, see the Animation Section in the Components sidebar. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/usage/getting-started","content":"","keywords":""},{"title":"Usage","type":1,"pageTitle":"Getting Started","url":"docs/usage/getting-started#usage","content":"Mainsail UI provides some common conventions for developer experience and happiness. "},{"title":"Variants","type":1,"pageTitle":"Getting Started","url":"docs/usage/getting-started#variants","content":"When a component has a broad selection of different styles available, these styles will be available under the variant property. <Button variant=\"primary\" /><Button variant=\"secondary\" /><Button variant=\"tertiary\" /> Copy "},{"title":"Intent vs Colors","type":1,"pageTitle":"Getting Started","url":"docs/usage/getting-started#intent-vs-colors","content":"Some components (icons for example) have a small variety of colors available to use for aesthetic purposes. These are accessed via the color prop. For context-specific coloring, the intent prop is used. Unlike a holistic style prop of variant, the intent prop is intended üòâ to be used to alter the color of a component variant for a particular use case. info In the case where any prop value is default, it can be omitted Examples // Using Intent<Button intent=\"default\" text=\"Safe to Press\" /><Button intent=\"danger\" text=\"Dragons Ahead!\" /> Copy // Using Colors<Icon name=\"text\" color=\"default\"/><Icon name=\"text\" color=\"light\"/><Icon name=\"text\" color=\"dark\"/> Copy "},{"title":"Style Overrides","type":1,"pageTitle":"Getting Started","url":"docs/usage/getting-started#style-overrides","content":""},{"title":"Colors","type":1,"pageTitle":"Getting Started","url":"docs/usage/getting-started#colors","content":"All color classes apply an !important tag so that they will act as overrides on any component styling. "},{"title":"Adding Spacing","type":1,"pageTitle":"Getting Started","url":"docs/usage/getting-started#adding-spacing","content":"There are some utility classes to add spacing helpers available for quick margins and padding. // Applying a margin right of 20px to the first button<Button text=\"Cancel\" className=\"mr-20\" /><Button text=\"Do it\" /> Copy See the css utility classes section for more details. "},{"title":"Props","type":1,"pageTitle":"Getting Started","url":"docs/usage/getting-started#props","content":""},{"title":"className","type":1,"pageTitle":"Getting Started","url":"docs/usage/getting-started#classname","content":"Most components in Mainsail UI pass through or append a className prop to the existing component's class attribute. Some components offer multiple className props with a unique designation where applicable. "},{"title":"Native Props","type":1,"pageTitle":"Getting Started","url":"docs/usage/getting-started#native-props","content":"Most native props that you might expect for a component to have may not be listed in the Storybook docs. Things like onBlur or onFocus are typically offered via {...props} spread into the internal component/element. In other words, they should just work when using a component even if they aren't documented. If you find a scenario where this isn't the case, please open a pull request. "},{"title":"Prop Naming","type":1,"pageTitle":"Getting Started","url":"docs/usage/getting-started#prop-naming","content":"You may notice prop names attempt to support alpha-sortable naming. While this may seem unusual at first, we feel that when you're looking for a prop that is prefixed with gap, it's easier to find the related sibling prop gapCol and gapRow. Mainsail strives to order things from broad to narrow specificity; this maintains that convention. "},{"title":"ENUM prop values (Recommended)","type":1,"pageTitle":"Getting Started","url":"docs/usage/getting-started#enum-prop-values-recommended","content":"Like many modern component libraries, utilizing PropTypes helps development along by throwing errors to your console if you pass an improper type to a component prop. While this is true of Mainsail, you can also utilize exposed ENUM prop values for each component. import { Button } from \"mainsail-ui\" <Button variant={Button.variants.secondary} text=\"Nope\" /> Copy Why not just use strings? Utilizing these constants in this way, not only reduce the number of magic strings in your codebase, but also make remembering the various prop values easy since most code editors and IDEs will provide auto-completion for such imported objects. It might look more verbose at first, but here are some benefits: Less cognitive overhead for remembering props and their valuesStrings are prone to typos whereas improperly typed constants should fail compilationIDE Support of auto-completionEasier to change the value of the prop if the library introduces new valuesFind and replace becomes easier if necessary "},{"title":"Style Guide & Principles","type":0,"sectionRef":"#","url":"docs/development/style-guide","content":"","keywords":""},{"title":"Code Style","type":1,"pageTitle":"Style Guide & Principles","url":"docs/development/style-guide#code-style","content":"The library uses Prettier code styling for simplicity. Nothing else to report here. "},{"title":"Naming Things","type":1,"pageTitle":"Style Guide & Principles","url":"docs/development/style-guide#naming-things","content":"When it comes to naming conventions, there are a some primary driving motivations behind all naming choices: Readability - keep it readableReason-Ability - keep it able to be immediately able to be reasoned withExplicitness - leave nothing ambiguous, #futureMeIsDumbSpecificity - ordering of context can create clearer code "},{"title":"Readability / Reason-Ability / Explicitness with Props","type":1,"pageTitle":"Style Guide & Principles","url":"docs/development/style-guide#readability--reason-ability--explicitness-with-props","content":"Ideally, developers should be able to immediately look at a component prop and understand what it is for without reading the docs. Prop names should immediately denote what they are used for and set out to do. Favor verbosity (within reason). We want to make our code easy to reason about. Most of the issues that we are attempting to alleviate with these conventions are safeguarded against simply by using prop-types and a little help from ESLINT. Even though prop-types are used on every React component in this library, we still strive for these patterns because they aid in consistency and an improved developer experience. Many editors benefit from including prop-types.  "},{"title":"Example Guidelines when Naming Props","type":1,"pageTitle":"Style Guide & Principles","url":"docs/development/style-guide#example-guidelines-when-naming-props","content":"DO NOT üö´ // Context of this verb is ambiguous, is this is not an action/event/callback?update; Copy DO NOT üö´ // While more specific and denotes an action, we want to favor using the `on` convention// to denote that this is something that happens when a person is updatedupdatePerson = () => {}; Copy DO ‚úÖ // prefixing event/actionable things with \"on\" will help the next user understand// immediately that is prop should expect something to happen when something updates.onUpdate; Copy DO ‚úÖ // if current use case has more than one context, specify the context (least specific -> more specific)onUpdatePerson; Copy DO NOT üö´ // As a boolean, usage of \"is\" is debatable here, with this library we have chosent to use is/has for all boolean// Note: This is enforced by ESLINTloading; Copy DO ‚úÖ // prefixing boolean props with \"is/has/should\" can help immediately infer that this should expect a boolean.isLoading; Copy DO NOT üö´ // this prop might be expecting an object, if a name or id is expected, specify that explicitly (see next section)person; Copy DO ‚úÖ // if this prop expects an \"id\", name it as such. (Note: we use camelCase, unless a class or component name where PascalCase is used)personId; Copy DO NOT üö´ // without knowing assignment, the prop here doesn't tell us that it should be a string, the prop could be expected to receive an objectperson = \"Bob\"; Copy DO ‚úÖ personName = \"Bob\"; // Obviously a name should be expected Copy "},{"title":"Specificity","type":1,"pageTitle":"Style Guide & Principles","url":"docs/development/style-guide#specificity","content":"Ordering specificity by context DO NOT üö´ /* specificity is jumping back and forth; broadest / specific / middle */.mainsail-light-blue {}.mainsail-medium-blue {}.mainsail-dark-blue {} Copy DO ‚úÖ /* choose to describe in order from least to most specific; broadest (namespace) / middle / specific */.mainsail-blue-light {}.mainsail-blue-medium {}.mainsail-blue-dark {} /*This specificity ordering convention makes more sense in the context of a group of named items.By itself `mainsail-light-blue` doesn't seem too egregious. If combined with others of similar nomenclature,coding/sorting benefits emerge by inverting theses specificity values to `mainsail-blue-light`.*/ Copy üìÇ This applies to file names as well. Structuring files this way will keep them organized and ordered by file systems. "},{"title":"Imports","type":1,"pageTitle":"Style Guide & Principles","url":"docs/development/style-guide#imports","content":"Regarding importing, the mainsail-ui developer environment supports a few convenient absolute alias resolvers (set up in jsconfig.json, package.json, and .storybook/main.js for editors, jest, and storybook respectively). The following paths are aliased: componentsstylesutility These folders are resolved for you so you don't need to use relative paths that leave you scratching your head wondering how deep something should be in a folder import. DO NOT üö´ // Button.stories.js uses icon componentimport { Icon } from \"../Icon\"; Copy DO ‚úÖ // Use the absolute alias insteadimport { Icon } from \"components/Icon\"; Copy This results in clearer, more readable imports. üí° As a rule of thumb, if you have more than one dot in the path, try to make it absolute with an included alias. "},{"title":"Enumerable Props","type":1,"pageTitle":"Style Guide & Principles","url":"docs/development/style-guide#enumerable-props","content":"The decision has been made to provide a convention to mitigate magic string usage in/for this library. Props with enum type of values that are utilized in a component should have their values exposed and exported as such. See Building a Component for more details. For Example: // Okay: The Button Component has a `variant` prop. <Button variant=\"primary\" /> // Better <Button variant={Button.variants.primary} /> Copy Usage of the prop could be handled by passing a string of \"primary\" but it is actually better to provide a means for the end-user-developer to not have to use strings at all for their prop if we can. \"But why?\" You might ask. Magic strings are prone to causing bugs. These bugs are likely to only surface at runtime. Here's some quick benefits If you type a string wrong, you likely won't discover it until the component renders and maybe not until it hits productionAutocomplete in most editors is provided by supplying enums/objectsFind/Replace becomes easier/more accurate when not using stringsDeveloper friendliness increases as you need to consult the docs less with prop key/values Setup may look like this: // Button.js...export const variants = { primary: \"primary\", secondary: \"secondary\", tertiary: \"tertiary\", link: \"link\", icon: \"icon\", } // The global export is being deprecated in favor of Component-specific prop name attachingexport const ENUMS = { variants}; ... // Button Component code... // Attached prop valuesButton.variants = variants Copy Usage may look like this: // Button.stories.jsimport { Button } from \"./Button\"; export const Primary = Template.bind({});Primary.args = { variant: Button.variants.primary, text: \"Click me\",}; Copy "},{"title":"Exports Concepts","type":1,"pageTitle":"Style Guide & Principles","url":"docs/development/style-guide#exports-concepts","content":"Individual component directories are exported with an index.js file solely for cleaner imports within this project. Also, there are some plop-driven export bits of logic that aid in the building of the libary for distribution. "},{"title":"Building a Component","type":0,"sectionRef":"#","url":"docs/development/building-components","content":"","keywords":""},{"title":"Using Generators üßû‚Äç‚ôÇÔ∏è","type":1,"pageTitle":"Building a Component","url":"docs/development/building-components#using-generators-üßû‚ôÇÔ∏è","content":"Each component has a set of files associated with it: <component>.js - where the bulk of the component is built<component>.scss - where the component styles live<component>.stories.js - where the component Storybook code lives<component>.test.js - jest / RTL testsindex.js - main export file for cleaner imports Thankfully, you don't have to manually create these each time you need to set up a new component. Mainsail UI utilizes the fantastic Plop JS to make development a little easier by reducing the boilerplate needed and keeping you from starting with nothing. "},{"title":"Generate a new component","type":1,"pageTitle":"Building a Component","url":"docs/development/building-components#generate-a-new-component","content":"yarn scaffold component Copy tip Note: omitting the component argument will result in multiple choice prompts This will prompt you for the following: Name: The name used throughout the project (files, folder, tests etc)Description: The description will be used in the code comments which will in-turn, be used to auto-generate Storybook description (unless overridden via story configs)Category: The Category is strictly for documentation purposes inside of Storybook  Updating Generators# Note: If ever there is a need to update the scaffolding and generators, see the following for more information: Two pertinent areas exist for building out generation/scaffolding: plopfile.js (where the cli configuration lives)plop-templates/* (text manipulation and generation templating files) See also the Plop JS Docs  "},{"title":"Writing the Component ‚úçÔ∏è","type":1,"pageTitle":"Building a Component","url":"docs/development/building-components#writing-the-component-Ô∏è","content":"If you ran yarn scaffold component and followed the prompts, you have a fresh <component>.js file waiting for you in the src/components/<component>/ folder. Feel free to use an existing component like the <Badge /> or the <Button /> as a reference guide if needed. The generated scaffolding should provide a decent starting point with the following structure: import React from \"react\";import PropTypes from \"prop-types\"; // Declare used props and their typesimport { classify } from \"utility/classify\"; // A helpful className concatenator import \"./MyComponent.scss\"; // The scss required for the component styles // Declare exported enums props up hereexport const variants = { ...} /** * MyComponent Description provided by plop scaffolding prompts (used by Storybook) **/export const MyComponent = ({ className, children, ...props }) => { return ( <div className={clsx(\"my-component-class\", className)}>{children}</div> );}; MyComponent.propTypes = { /** (Optional) click handler */ onClick: PropTypes.func,}; MyComponent.defaultProps = { // Specify the default values of any props here}; // attach your prop enums to the component directly for convenient use to avoid magic strings in component implementation (see Getting Started)MyComponent.variants = variants Copy A few things of importance about the component structure: The component & description name will be generated by the scaffold command promptsFunctional react components are expected and requiredProp-Types are expected and requiredComments above the prop-types are utilized by Storybook for documenting prop tables  "},{"title":"Writing the Stories üìö","type":1,"pageTitle":"Building a Component","url":"docs/development/building-components#writing-the-stories-","content":"Don't forget to start Storybook if you haven't: yarn start Copy "},{"title":"A Storybook story is:","type":1,"pageTitle":"Building a Component","url":"docs/development/building-components#a-storybook-story-is","content":"an isolated use-case of a componentable to provide a means of visual/functional operational testing on a unit and integration leveljust an exported react component (which means, you can use React and javascript to do whatever you want with it) "},{"title":"What deserves a Story?","type":1,"pageTitle":"Building a Component","url":"docs/development/building-components#what-deserves-a-story","content":"if the component is supposed to behave a certain way, make a story for that behaviorif you want to write a test for a specific behavior or action, make a story first (writing tests will be easier!)if you want to visually test a design aspect, make a story that displays that design (chromatic will visually diff changes off of stories) Stories have a scaffolded initial structure. import React from \"react\"; import { MyComponent } from \"./MyComponent\"; export default { title: \"MyComponentCategory/MyComponent\", // Determines the title and nesting structure for navigation in Storybook component: MyComponent, // Actual component code argTypes: { // Arg types can be configured with more options for the docs and addons sections of Storybook (see Badges.stories.js) ...CustomConfigThatYouMightUse, },}; const Template = (args) => <MyComponent {...args} />; // Template component pattern aids in code reuse throughout stories export const Primary = Template.bind({});Primary.args = { variant: MyComponent.variants.primary, text: \"Click me\",}; export const Secondary = Template.bind({});// Defining args this way aids in code reuse and simplicitySecondary.args = { variant: MyComponent.variants.secondary, // No magic strings here, ENUMS accessed directly from the component text: \"Click me\",}; Copy The default export is the primary story for your component. It will dictate what shows up in the Docs tab/section of your Story. Any additional named exports will be included as additional stories for your component. Storybook will utilize their export name to generate naming for documentation. This behavior can be overridden (see below Helpful Story Configuration). Note: the pattern used above for defining stories. This Template.bind({}) + args pattern reduces the unique code necessary per story. const Template = (args) => <MyComponent {...args} />; export const Primary = Template.bind({});Primary.args = { variant: MyComponent.variants.primary, text: \"Click me\",}; Copy Helpful Story Configuration# There are a lot of nuts and bolts that can be configured per story. Supply a Custom Story Description For example, to configure docs tab/page descriptions per story, use the .parameters.docs.description.story property on your story export. export const Controlled = Checkbox.bind({}); Controlled.args = { text: \"A choice\", isChecked: true,};Controlled.parameters = { docs: { description: { story: \"Can be a controlled component via the isChecked prop\", }, },}; Copy Rename a Story from its Auto-Generated Name export const Primary = () => <Button text=\"Button\" />; Primary.storyName = \"Fancier Name\"; Copy tip For more information on writing stories see the official site. "},{"title":"Writing the Tests üß™","type":1,"pageTitle":"Building a Component","url":"docs/development/building-components#writing-the-tests-üß™","content":"While it can be argued that Tests should come first, when working with Storybook, it makes sense to write stories before tests. This means you will likely work in the following flow: Build a ComponentWrite a StoryWrite a test The reasoning here is because exported Story code can be reused in test code to prevent brittle tests and provide direct access to how the Component should operate (its use-case) coming directly from the story. Here's an example: // Checkbox.test.js import React from \"react\";import { render, screen } from \"@testing-library/react\";import userEvent from \"@testing-library/user-event\";import \"@testing-library/jest-dom/extend-expect\"; import { Basic, Indeterminate, DefaultChecked, IndeterminateGroup,} from \"./Checkbox.stories\"; // Imported stories are available for testing it(\"renders the proper icon with the indeterminate state\", () => { render(<Indeterminate {...Indeterminate.args} />); // Render the Story, not the Component, reuse its Story args! expect(screen.getByRole(\"checkbox\").indeterminate).toBe(true); expect(screen.getByTestId(\"indeterminate-svg\")).toBeInTheDocument();}); it(\"renders the proper icon with the checked state\", () => { render(<Basic {...Basic.args} isChecked />); expect(screen.getByRole(\"checkbox\")).toBeChecked(); expect(screen.getByTestId(\"check-svg\")).toBeInTheDocument();}); Copy Notice that because we exported the stories with the suggested pattern, we can reuse them within our tests along with their arguments that have been provided to the story! This results in tests that are: üéâ Shorterüßê Easier to readüîó Stay up-to-date with their component/story with less duplicationüèñ Focus less on implementation details "},{"title":"Running Tests üèÉ‚Äç‚ôÇÔ∏è","type":1,"pageTitle":"Building a Component","url":"docs/development/building-components#running-tests-‚ôÇÔ∏è","content":"If you have VS Code and the Jest Plugin (or a similar editor and plugin), you might be able to benefit from inline test runs. Your tests can be running while you write code and provide realtime feedback on the file you're currently working with.  If you like it old school, feel free to run them from the command line: yarn test Copy "},{"title":"AutoGrid","type":0,"sectionRef":"#","url":"docs/guides/autogrid","content":"","keywords":""},{"title":"Under the Hood","type":1,"pageTitle":"AutoGrid","url":"docs/guides/autogrid#under-the-hood","content":"<AutoGrid/> uses CSS Grid under the hood. That might sound a little scary. But CSS Grid gives you layout superpowers. Why use CSS grid over flexbox or other old-school techniques? Pros: CSS Grid allows you more control with less actual markup than any other means of producing responsive layoutsIt provides a great api for producing pain-free gutters and spacing between children Cons: the overall API for CSS Grid is admittedly pretty complicated. That's where <AutoGrid/> comes in. It provides an abstraction over the many common use-cases for CSS Grid that you may encounter in frontend development. On top of this, it affords you the ability to sprinkle in responsiveness at the same time with little effort. Let's take a look. tip At any point, feel free to tinker around with the demo on stackblitz "},{"title":"Out of the Box","type":1,"pageTitle":"AutoGrid","url":"docs/guides/autogrid#out-of-the-box","content":"Without much customization, AutoGrid will do its best to just arrange things automatically inside the column and row counts you specify. Don't want to specify a row count? That's fine too. This works great for a uniform system of grid-like items like a layout of cards on screen. But it also can be configured with colSpan and rowSpan on nested items to stretch things across columns and rows. This automatic behavior and the ability to position things at and across any number of columns and rows makes AutoGrid immensely powerful. You're going to have super powers by the time you are done here. "},{"title":"A Dozen Options","type":1,"pageTitle":"AutoGrid","url":"docs/guides/autogrid#a-dozen-options","content":"Similar to Bootstrap, our layout components (Flex and AutoGrid) utilize a (max) 12 column scale. As shown above, this scale provides all the flexibility you should need. The cool thing about AutoGrid, is that you get to specify how many columns you want to use at any time. For Example <AutoGrid cols={12} className=\"w-full\"> <div className=\"bg-blue-light p-20\"></div></AutoGrid> Copy Produces this:  We could have just as easily told it we only want two columns by doing this: <AutoGrid cols={2} /> Copy Which would end up giving us a grid that looked like this: Where things really get exciting is when you start nesting. But more on that later. "},{"title":"About that Responsive Stuff","type":1,"pageTitle":"AutoGrid","url":"docs/guides/autogrid#about-that-responsive-stuff","content":"At different breakpoints, you may want different column counts. You can achieve this by passing in an array of column counts to the cols prop. This array just represents the [sm, md, lg] breakpoints that the AutoGrid component should adhere to. And you can leave out md, and/or lg if you only want to respond to 1 or 2 breakpoints. For Example: <AutoGrid cols={[1, 2, 4]} />// Has 4 cols on large, 2 cols on md, and 1 col on sm breakpoints Copy And looks like this:  "},{"title":"So why would you ever use a large column count??","type":1,"pageTitle":"AutoGrid","url":"docs/guides/autogrid#so-why-would-you-ever-use-a-large-column-count","content":"Large column counts come in handy when you want some finer control of things inside the grid. Which means now is a perfect time to talk about nesting AutoGrid components. "},{"title":"Nesting <AutoGrid/>","type":1,"pageTitle":"AutoGrid","url":"docs/guides/autogrid#nesting-autogrid","content":"Here's an example of a 12 column auto grid parent and a 2 (or 1 at small breakpoint) column child AutoGrid. (The Divs are there for visibility). Notice when we highlight the child AutoGrid (shown in the coral color), it only tries to take up the width of the first column of the parent grid. Yet, the divs of the child AutoGrid, are now filling in the first (and only) two columns of the nested AutoGrid. Nifty! <AutoGrid cols={12} className=\"w-full\"> <AutoGrid cols={[1, 2]}> <div className=\"py-30 w-full bg-violet-middle\" /> <div className=\"py-30 w-full bg-red-middle\" /> </AutoGrid></AutoGrid> Copy  Now, lets introduce some superpowers. Let's move the child AutoGrid along the horizontal column axis by using colStart... An important distinction is that this prop on the nested AutoGrid applies to the position inside the parent AutoGrid. (It has no effect on its own children divs.) <AutoGrid cols={12} className=\"w-full\"> <AutoGrid cols={[1, 2]} colStart={4}> <div className=\"py-30 w-full bg-violet-middle\" /> <div className=\"py-30 w-full bg-red-middle\" /> </AutoGrid></AutoGrid> Copy  Sweet. We've push over the inner grid to start in column 4! Again, this prop only applies when nested inside another grid. But what happens if we introduce colEnd? <AutoGrid cols={12} className=\"w-full\"> <AutoGrid cols={[1, 2]} colStart={4} colEnd={10}> <div className=\"py-30 w-full bg-violet-middle\" /> <div className=\"py-30 w-full bg-red-middle\" /> </AutoGrid></AutoGrid> Copy  We've stretched the child grid over the columns of the parent grid (starting at 4 and ending at 10)! Awesome. caution The colEnd can be a little tricky in that you are not ending the span with the column containing the content, you're ending it before the column number specified. "},{"title":"Using the colSpan prop","type":1,"pageTitle":"AutoGrid","url":"docs/guides/autogrid#using-the-colspan-prop","content":"This similar effect can be achieved using the colSpan prop but mixing the two is not supported (at this time). This prop does make it easy to produce multi column spans of children, however, which can be useful in Forms and other grid-centric layouts. Note: As you will see in the Advanced Grid/Form Demo the colSpan prop can be used directly on the <FormControl/> and supports responsive array column counts.   "},{"title":"What about rows?","type":1,"pageTitle":"AutoGrid","url":"docs/guides/autogrid#what-about-rows","content":"AutoGrid will let things flow by \"row\" out of the box. This means any number of children will flow left to right across the row unless told otherwise by the flow prop. Let's take a look at this: <AutoGrid cols={2} gap={20} className=\"w-full\"> <div className=\"py-30 w-full bg-violet-middle\" /> <div className=\"py-30 w-full bg-red-middle\" /> <div className=\"py-30 w-full bg-green-middle\" /></AutoGrid> Copy This grid above is declared with two cols and no rows count, so the children will flow and wrap to the next \"available\" row by default. As shown below, the green box is the 3rd child and is not going to fit on the 2 column row, so it forms a new one automagically.  With this knowledge, rowSpan vs rowStart and rowEnd achieve similar results to how columns work! "},{"title":"Mind the Gap","type":1,"pageTitle":"AutoGrid","url":"docs/guides/autogrid#mind-the-gap","content":"One of the bestest features of the CSS Grid is its ability to produce gutters with hardly any effort or side-effects that plague other layout patterns. (I'm looking at you negative margins and padding.) AutoGrid comes with two options for producing gutters. gap OR gapCol and gapRow can be used to produce similar effects. The latter two are used instead when you need a different spacing horizontally vs vertically. Here's the previous example we used. Notice that the <AutoGrid/> has a gap prop applied. <AutoGrid cols={2} gap={20} className=\"w-full\"> <div className=\"py-30 w-full bg-violet-middle\" /> <div className=\"py-30 w-full bg-red-middle\" /> <div className=\"py-30 w-full bg-green-middle\" /></AutoGrid> Copy Gaps produce the space between children on a pixel scale per the design specs available for our common margins. Specifier\tPixels0\t0px 4\t4px 8\t8px 10\t10px 12\t12px 15\t15px 16\t16px 20\t20px 30\t30px 48\t48px "},{"title":"<AutoGridItem />","type":1,"pageTitle":"AutoGrid","url":"docs/guides/autogrid#autogriditem-","content":"One more piece of the puzzle; The AutoGridItem (or <AutoGrid.Item> if you desire to only import one thing) is another available component that can be used inside of AutoGrid that offers you a means of providing the following controls to children without nesting another grid: ProprowSpan colSpan rowStart rowStart alignItems justifyItems This example illustrates how the AutoGridItem can be used to control spanning: <AutoGrid cols={2} gap={20} className=\"w-full\"> <div className=\"py-48 w-full bg-violet-middle\" /> <div className=\"py-30 w-full bg-red-middle\" /> <AutoGrid.Item colSpan={2} className=\"bg-green-middle\" /></AutoGrid> Copy To achieve this:  And with some creativity, you can achieve things very easily that would be difficult using other layout patterns. <AutoGrid cols={12} rows={6} gap={20} className=\"w-full\"> <AutoGrid.Item colStart={4} colEnd={10} className=\"bg-violet-middle\" /> <AutoGrid.Item colSpan={6} rowSpan={2} className=\"bg-blue-middle\" /> <AutoGrid.Item colSpan={6} rowSpan={2} className=\"bg-green-middle\" /></AutoGrid> Copy  "},{"title":"Alignment options","type":1,"pageTitle":"AutoGrid","url":"docs/guides/autogrid#alignment-options","content":"One key benefit to using the AutoGridItem is the alignment props it affords you for free. Free vertical alignment? What?! Yep. Notice the emoji below. <AutoGrid.Item colSpan={6} rowSpan={2} justifyItems=\"center\" alignItems=\"center\" className=\"bg-green-middle\"> ü§Ø</AutoGrid.Item> Copy  "},{"title":"Summary","type":1,"pageTitle":"AutoGrid","url":"docs/guides/autogrid#summary","content":"AutoGrid is a flexible super tool that gives you the ability to layout simple or complex responsive layouts with relative ease. Play around in the demo sandbox here. Basic Playground ExampleAdvanced Playground ExampleStorybook docs page "}]