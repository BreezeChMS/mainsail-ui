(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9015],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=o,h=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7640:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var a=n(2122),o=n(9756),i=(n(7294),n(3905)),r=["components"],l={title:"AutoGrid",sidebar_position:2},s=void 0,p={unversionedId:"guides/autogrid",id:"guides/autogrid",isDocsHomePage:!1,title:"AutoGrid",description:"Let's take a look at how to use this new layout component to its fullest.",source:"@site/docs/guides/autogrid.mdx",sourceDirName:"guides",slug:"/guides/autogrid",permalink:"/docs/guides/autogrid",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/guides/autogrid.mdx",version:"current",sidebarPosition:2,frontMatter:{title:"AutoGrid",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Animating Things",permalink:"/docs/guides/animating-mainsail"},next:{title:"Forms",permalink:"/docs/guides/forms"}},d=[{value:"Under the Hood",id:"under-the-hood",children:[]},{value:"Out of the Box",id:"out-of-the-box",children:[]},{value:"A Dozen Options",id:"a-dozen-options",children:[]},{value:"About that Responsive Stuff",id:"about-that-responsive-stuff",children:[{value:"So why would you ever use a large column count??",id:"so-why-would-you-ever-use-a-large-column-count",children:[]}]},{value:"Nesting <code>&lt;AutoGrid/&gt;</code>",id:"nesting-autogrid",children:[{value:"Using the <code>colSpan</code> prop",id:"using-the-colspan-prop",children:[]}]},{value:"What about rows?",id:"what-about-rows",children:[]},{value:"Mind the Gap",id:"mind-the-gap",children:[]},{value:"<code>&lt;AutoGridItem /&gt;</code>",id:"autogriditem-",children:[]},{value:"Alignment options",id:"alignment-options",children:[]},{value:"Summary",id:"summary",children:[]}],u={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Let's take a look at how to use this new layout component to its fullest."),(0,i.kt)("h2",{id:"under-the-hood"},"Under the Hood"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<AutoGrid/>")," uses CSS Grid under the hood. That might sound a little scary. But CSS Grid gives you layout superpowers."),(0,i.kt)("p",null,"Why use CSS grid over flexbox or other old-school techniques?"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Pros:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"},"CSS Grid")," allows you more control with ",(0,i.kt)("strong",{parentName:"li"},"less actual markup")," than any other means of producing responsive layouts"),(0,i.kt)("li",{parentName:"ul"},"It provides a great api for producing ",(0,i.kt)("strong",{parentName:"li"},"pain-free gutters and spacing between children"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Cons:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the overall API for CSS Grid is admittedly pretty complicated.")),(0,i.kt)("p",null,"That's where ",(0,i.kt)("inlineCode",{parentName:"p"},"<AutoGrid/>")," comes in."),(0,i.kt)("p",null,"It provides an abstraction over the many common use-cases for CSS Grid that you may encounter in frontend development. On top of this, it affords you the ability to sprinkle in responsiveness at the same time with little effort."),(0,i.kt)("p",null,"Let's take a look."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"At any point, feel free to tinker around with the ",(0,i.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/mainsail-grid-demo?embed=1&file=src/App.js"},"demo on stackblitz")))),(0,i.kt)("h2",{id:"out-of-the-box"},"Out of the Box"),(0,i.kt)("p",null,"Without much customization, AutoGrid will do its best to just arrange things automatically inside the column and row counts you specify. Don't want to specify a row count? That's fine too."),(0,i.kt)("p",null,"This works great for a uniform system of grid-like items like a layout of cards on screen. But it also can be configured with ",(0,i.kt)("inlineCode",{parentName:"p"},"colSpan")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"rowSpan")," on nested items to stretch things ",(0,i.kt)("strong",{parentName:"p"},"across")," columns and rows. This automatic behavior and the ability to position things ",(0,i.kt)("strong",{parentName:"p"},"at and across any number of columns and rows")," makes AutoGrid immensely powerful. You're going to have super powers by the time you are done here."),(0,i.kt)("h2",{id:"a-dozen-options"},"A Dozen Options"),(0,i.kt)("p",null,"Similar to Bootstrap, our layout components (Flex and AutoGrid) utilize a (max) 12 column scale."),(0,i.kt)("p",null,"As shown above, this scale provides all the flexibility you should need. The cool thing about AutoGrid, is that you get to specify ",(0,i.kt)("strong",{parentName:"p"},"how many")," columns you want to use at any time."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"For Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<AutoGrid cols={12} className="w-full">\n    <div className="bg-blue-light p-20"></div>\n</AutoGrid>\n')),(0,i.kt)("p",null,"Produces this:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/30707961/119004640-bc2b0d80-b95c-11eb-9a06-b4f39c9cb22e.png",alt:"A simple grid of 12 columns"})),(0,i.kt)("p",null,"We could have just as easily told it we only want two columns by doing this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<AutoGrid cols={2} />\n")),(0,i.kt)("p",null,"Which would end up giving us a grid that looked like this:\n",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/30707961/119005934-e92bf000-b95d-11eb-95a1-d6f023ec8ed6.png",alt:"A simple 2 col grid"})),(0,i.kt)("p",null,"Where things really get exciting is when you start nesting. But more on that later."),(0,i.kt)("h2",{id:"about-that-responsive-stuff"},"About that Responsive Stuff"),(0,i.kt)("p",null,"At different breakpoints, you may want different column counts."),(0,i.kt)("p",null,"You can achieve this by passing in an array of column counts to the ",(0,i.kt)("inlineCode",{parentName:"p"},"cols")," prop."),(0,i.kt)("p",null,"This array just represents the ",(0,i.kt)("inlineCode",{parentName:"p"},"[sm, md, lg]")," breakpoints that the AutoGrid component should adhere to. And you can leave out ",(0,i.kt)("inlineCode",{parentName:"p"},"md"),", and/or ",(0,i.kt)("inlineCode",{parentName:"p"},"lg")," if you only want to respond to 1 or 2 breakpoints."),(0,i.kt)("p",null,"For Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<AutoGrid cols={[1, 2, 4]} />\n// Has 4 cols on large, 2 cols on md, and 1 col on sm breakpoints\n")),(0,i.kt)("p",null,"And looks like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/30707961/119006927-ccdc8300-b95e-11eb-844b-3341673a5cc3.gif",alt:"Look ma, responsive column counts!"})),(0,i.kt)("h3",{id:"so-why-would-you-ever-use-a-large-column-count"},"So why would you ever use a large column count??"),(0,i.kt)("p",null,"Large column counts come in handy when you want some finer control of things inside the grid. Which means now is a perfect time to talk about ",(0,i.kt)("strong",{parentName:"p"},"nesting")," AutoGrid components."),(0,i.kt)("h2",{id:"nesting-autogrid"},"Nesting ",(0,i.kt)("inlineCode",{parentName:"h2"},"<AutoGrid/>")),(0,i.kt)("p",null,"Here's an example of a 12 column auto grid parent and a 2 (or 1 at small breakpoint) column child AutoGrid. (The Divs are there for visibility)."),(0,i.kt)("p",null,"Notice when we highlight the child AutoGrid (shown in the coral color), it only tries to take up the width of the first column of the parent grid. Yet, the divs of the child AutoGrid, are now filling in the first (and only) two columns of the nested AutoGrid. Nifty!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<AutoGrid cols={12} className="w-full">\n    <AutoGrid cols={[1, 2]}>\n        <div className="py-30 w-full bg-violet-middle" />\n        <div className="py-30 w-full bg-red-middle" />\n    </AutoGrid>\n</AutoGrid>\n')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/30707961/119009091-c818ce80-b960-11eb-8ab1-0d4b2300d717.gif",alt:"CleanShot 2021-05-20 at 11 44 29"})),(0,i.kt)("p",null,"Now, lets introduce some superpowers."),(0,i.kt)("p",null,"Let's move the child AutoGrid along the horizontal column axis by using ",(0,i.kt)("inlineCode",{parentName:"p"},"colStart"),"... An important distinction is that this prop on the nested AutoGrid applies to the position inside the ",(0,i.kt)("em",{parentName:"p"},"parent")," AutoGrid. (It has no effect on its own children divs.)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<AutoGrid cols={12} className="w-full">\n    <AutoGrid cols={[1, 2]} colStart={4}>\n        <div className="py-30 w-full bg-violet-middle" />\n        <div className="py-30 w-full bg-red-middle" />\n    </AutoGrid>\n</AutoGrid>\n')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/30707961/119010330-f054fd00-b961-11eb-84eb-2dc6f9fa9302.png",alt:"Using colStart"})),(0,i.kt)("p",null,"Sweet. We've push over the inner grid to start ",(0,i.kt)("strong",{parentName:"p"},"in")," column ",(0,i.kt)("inlineCode",{parentName:"p"},"4"),"! Again, this prop only applies when nested inside another grid."),(0,i.kt)("p",null,"But what happens if we introduce ",(0,i.kt)("inlineCode",{parentName:"p"},"colEnd"),"?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<AutoGrid cols={12} className="w-full">\n    <AutoGrid cols={[1, 2]} colStart={4} colEnd={10}>\n        <div className="py-30 w-full bg-violet-middle" />\n        <div className="py-30 w-full bg-red-middle" />\n    </AutoGrid>\n</AutoGrid>\n')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/30707961/119009995-a1a76300-b961-11eb-9e80-148e9188b79c.png",alt:"Using colEnd"})),(0,i.kt)("p",null,"We've stretched the child grid over the columns of the parent grid (starting at 4 and ending at 10)! Awesome."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"colEnd")," can be a little tricky in that you are not ending the span with the column containing the content, you're ending it ",(0,i.kt)("em",{parentName:"p"},"before")," the column number specified."))),(0,i.kt)("h3",{id:"using-the-colspan-prop"},"Using the ",(0,i.kt)("inlineCode",{parentName:"h3"},"colSpan")," prop"),(0,i.kt)("p",null,"This similar effect can be achieved using the ",(0,i.kt)("inlineCode",{parentName:"p"},"colSpan")," prop but mixing the two is not supported (at this time). This prop does make it easy to produce multi column spans of children, however, which can be useful in Forms and other grid-centric layouts."),(0,i.kt)("p",null,"Note: As you will see in the ",(0,i.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/mainsail-advanced-grid-form?file=src/App.js"},"Advanced Grid/Form Demo")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"colSpan")," prop can be used directly on the ",(0,i.kt)("inlineCode",{parentName:"p"},"<FormControl/>")," and supports responsive array column counts."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/30707961/119012491-167b9c80-b964-11eb-8e36-f7f86eb61a32.png",alt:"Nested Advanced Grid"})),(0,i.kt)("iframe",{style:{width:"100%",height:"500px"},src:"https://stackblitz.com/edit/mainsail-advanced-grid-form?embed=1&file=src/App.js&hideExplorer=1&hideNavigation=1&theme=dark&view=preview"}),(0,i.kt)("h2",{id:"what-about-rows"},"What about rows?"),(0,i.kt)("p",null,"AutoGrid will let things ",(0,i.kt)("inlineCode",{parentName:"p"},"flow"),' by "row" out of the box. This means any number of children will flow left to right across the row unless told otherwise by the ',(0,i.kt)("inlineCode",{parentName:"p"},"flow")," prop."),(0,i.kt)("p",null,"Let's take a look at this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<AutoGrid cols={2} gap={20} className="w-full">\n    <div className="py-30 w-full bg-violet-middle" />\n    <div className="py-30 w-full bg-red-middle" />\n    <div className="py-30 w-full bg-green-middle" />\n</AutoGrid>\n')),(0,i.kt)("p",null,"This grid above is declared with two ",(0,i.kt)("inlineCode",{parentName:"p"},"cols")," and no ",(0,i.kt)("inlineCode",{parentName:"p"},"rows"),' count, so the children will flow and wrap to the next "available" row by default. As shown below, the green box is the 3rd child and is not going to fit on the 2 column row, so it forms a new one ',(0,i.kt)("em",{parentName:"p"},"automagically"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/30707961/119015640-1761fd80-b967-11eb-84b2-1841091dc6be.png",alt:"Flowing rows"})),(0,i.kt)("p",null,"With this knowledge, ",(0,i.kt)("inlineCode",{parentName:"p"},"rowSpan")," vs ",(0,i.kt)("inlineCode",{parentName:"p"},"rowStart")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"rowEnd")," achieve similar results to how columns work!"),(0,i.kt)("h2",{id:"mind-the-gap"},"Mind the Gap"),(0,i.kt)("p",null,"One of the bestest features of the CSS Grid is its ability to produce gutters with hardly any effort or side-effects that plague other layout patterns. (I'm looking at you negative margins and padding.)"),(0,i.kt)("p",null,"AutoGrid comes with two options for producing gutters. ",(0,i.kt)("inlineCode",{parentName:"p"},"gap")," OR ",(0,i.kt)("inlineCode",{parentName:"p"},"gapCol")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"gapRow")," can be used to produce similar effects. The latter two are used instead when you need a different spacing horizontally vs vertically."),(0,i.kt)("p",null,"Here's the previous example we used. Notice that the ",(0,i.kt)("inlineCode",{parentName:"p"},"<AutoGrid/>")," has a ",(0,i.kt)("inlineCode",{parentName:"p"},"gap")," prop applied."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<AutoGrid cols={2} gap={20} className="w-full">\n    <div className="py-30 w-full bg-violet-middle" />\n    <div className="py-30 w-full bg-red-middle" />\n    <div className="py-30 w-full bg-green-middle" />\n</AutoGrid>\n')),(0,i.kt)("p",null,"Gaps produce the space between children on a pixel scale per the design specs available for our common margins."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"right"},"Specifier"),(0,i.kt)("th",{parentName:"tr",align:null},"Pixels"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"0px")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"4"),(0,i.kt)("td",{parentName:"tr",align:null},"4px")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"8"),(0,i.kt)("td",{parentName:"tr",align:null},"8px")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"10"),(0,i.kt)("td",{parentName:"tr",align:null},"10px")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"12"),(0,i.kt)("td",{parentName:"tr",align:null},"12px")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"15"),(0,i.kt)("td",{parentName:"tr",align:null},"15px")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"16"),(0,i.kt)("td",{parentName:"tr",align:null},"16px")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"20"),(0,i.kt)("td",{parentName:"tr",align:null},"20px")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"30"),(0,i.kt)("td",{parentName:"tr",align:null},"30px")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"48"),(0,i.kt)("td",{parentName:"tr",align:null},"48px")))),(0,i.kt)("h2",{id:"autogriditem-"},(0,i.kt)("inlineCode",{parentName:"h2"},"<AutoGridItem />")),(0,i.kt)("p",null,"One more piece of the puzzle; The AutoGridItem (or ",(0,i.kt)("inlineCode",{parentName:"p"},"<AutoGrid.Item>")," if you desire to only import one thing) is another available component that can be used inside of AutoGrid that offers you a means of providing the following controls to children without nesting another grid:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Prop"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"rowSpan")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"colSpan")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"rowStart")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"rowStart")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"alignItems")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"justifyItems")))),(0,i.kt)("p",null,"This example illustrates how the AutoGridItem can be used to control spanning:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<AutoGrid cols={2} gap={20} className="w-full">\n    <div className="py-48 w-full bg-violet-middle" />\n    <div className="py-30 w-full bg-red-middle" />\n    <AutoGrid.Item colSpan={2} className="bg-green-middle" />\n</AutoGrid>\n')),(0,i.kt)("p",null,"To achieve this:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/30707961/119018208-dc14fe00-b969-11eb-8be3-17060c542e6d.png",alt:"AutoGridItem in use to show spanning"})),(0,i.kt)("p",null,"And with some creativity, you can achieve things very easily that would be difficult using other layout patterns."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<AutoGrid cols={12} rows={6} gap={20} className="w-full">\n    <AutoGrid.Item colStart={4} colEnd={10} className="bg-violet-middle" />\n    <AutoGrid.Item colSpan={6} rowSpan={2} className="bg-blue-middle" />\n    <AutoGrid.Item colSpan={6} rowSpan={2} className="bg-green-middle" />\n</AutoGrid>\n')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/30707961/119018859-8ee55c00-b96a-11eb-9d6d-9203fed74b14.png",alt:"Stack it up, baby"})),(0,i.kt)("h2",{id:"alignment-options"},"Alignment options"),(0,i.kt)("p",null,"One key benefit to using the AutoGridItem is the alignment props it affords you for free. Free vertical alignment? What?! Yep."),(0,i.kt)("p",null,"Notice the emoji below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<AutoGrid.Item\n    colSpan={6}\n    rowSpan={2}\n    justifyItems="center"\n    alignItems="center"\n    className="bg-green-middle">\n    \ud83e\udd2f\n</AutoGrid.Item>\n')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/30707961/119019729-79246680-b96b-11eb-9517-8fc3676aa824.png",alt:"Look ma, vertical alignment!"})),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"AutoGrid is a flexible super tool that gives you the ability to layout simple or complex responsive layouts with relative ease."),(0,i.kt)("p",null,"Play around in the demo sandbox here."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://stackblitz.com/edit/mainsail-grid-demo?file=src%2FApp.js"},"Basic Playground Example")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://stackblitz.com/edit/mainsail-advanced-grid-form"},"Advanced Playground Example")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://shared.breezechms.com/mainsail-ui/?path=/docs/layout-grid-autogrid--simple-grid"},"Storybook docs page"))))}m.isMDXComponent=!0}}]);