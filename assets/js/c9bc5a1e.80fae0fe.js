(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7725],{3905:function(e,t,i){"use strict";i.d(t,{Zo:function(){return u},kt:function(){return p}});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(i),p=a,h=d["".concat(l,".").concat(p)]||d[p]||m[p]||r;return i?n.createElement(h,o(o({ref:t},u),{},{components:i})):n.createElement(h,o({ref:t},u))}));function p(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=i[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}d.displayName="MDXCreateElement"},859:function(e,t,i){"use strict";i.r(t),i.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var n=i(2122),a=i(9756),r=(i(7294),i(3905)),o=["components"],s={title:"Animating Things",sidebar_position:1},l=void 0,c={unversionedId:"guides/animating-mainsail",id:"guides/animating-mainsail",isDocsHomePage:!1,title:"Animating Things",description:"Mainsail provides a couple components to aid in animating transitions for components.",source:"@site/docs/guides/animating-mainsail.md",sourceDirName:"guides",slug:"/guides/animating-mainsail",permalink:"/docs/guides/animating-mainsail",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/guides/animating-mainsail.md",version:"current",sidebarPosition:1,frontMatter:{title:"Animating Things",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Using Storybook",permalink:"/docs/guides/using-storybook"},next:{title:"AutoGrid",permalink:"/docs/guides/autogrid"}},u=[{value:"Transition",id:"transition",children:[{value:"How to get it moving",id:"how-to-get-it-moving",children:[]}]},{value:"Switcher",id:"switcher",children:[{value:"Why use <code>&lt;Switcher/&gt;</code>?",id:"why-use-switcher",children:[]},{value:"The <code>useSwitcher</code> Hook",id:"the-useswitcher-hook",children:[]}]}],m={toc:u};function d(e){var t=e.components,i=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Mainsail provides a couple components to aid in animating transitions for components."),(0,r.kt)("h2",{id:"transition"},"Transition"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Uses ",(0,r.kt)("a",{parentName:"li",href:"https://reactcommunity.org/react-transition-group/"},"React Transition Group")," under the hood for easily customizable, css-based animations"),(0,r.kt)("li",{parentName:"ul"},"Useful for enter and exit animations"),(0,r.kt)("li",{parentName:"ul"},"Unmounts a component when animation is done (by default - is configurable)"),(0,r.kt)("li",{parentName:"ul"},"Allows for animation lifecycle callbacks - call a function when things start or are finished!")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Transition animation={"fade"} isActive={true} shouldAnimateOnMount>\n    <div>Look ma, I fade in/out</div>\n</Transition>\n')),(0,r.kt)("h3",{id:"how-to-get-it-moving"},"How to get it moving"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"isActive")," is the prop that triggers the enter/exit animation to start."),(0,r.kt)("h2",{id:"switcher"},"Switcher"),(0,r.kt)("h3",{id:"why-use-switcher"},"Why use ",(0,r.kt)("inlineCode",{parentName:"h3"},"<Switcher/>"),"?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Automatically wraps any child element with ",(0,r.kt)("inlineCode",{parentName:"li"},"<Transition/>")),(0,r.kt)("li",{parentName:"ul"},"Directionally transitions between children (e.g. sliding Forwards/Backwards depending on direction of movement)"),(0,r.kt)("li",{parentName:"ul"},"Easier state management with the included ",(0,r.kt)("inlineCode",{parentName:"li"},"useSwitcher")," hook")),(0,r.kt)("h3",{id:"the-useswitcher-hook"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"useSwitcher")," Hook"),(0,r.kt)("p",null,"This hook exists solely as a convenience to manage all the state needed for the Switcher component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Switcher, useSwitcher } from "mainsail-ui";\n\nconst {\n    previousView,\n    currentView,\n    previousAnim,\n    nextAnim,\n    setView,\n} = useSwitcher({\n    // Just providing some initial config defaults to the hook\n    currentView: 1, // starting view\n    nextAnim: "fade-slide-left", // animation for moving to next item\n    previousAnim: "fade-slide-right", // animation for moving to previous item\n});\n\n// Here\'s the actual switcher (taken from the Switcher Basic story)\n\n// The parent of a Switcher needs to be position: relative,\n// if you desire the switcher to take up the full width/height of the parent\n\n// In this example, the parent is set to a width of 50% and full height of the viewport using Mainsail utility classes\n\n<div className="relative w-1/2 h-screen">\n    <Switcher\n        currentView={currentView}\n        previousView={previousView}\n        previousAnim={previousAnim}\n        nextAnim={nextAnim}>\n        <div data-testid="view-1" className="p-20 w-full h-full bg-blue-light">\n            <h3>View 1</h3>\n            <p>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                Blanditiis, ipsam. Itaque animi et odio? Cum, nihil officia.\n                Sint, perspiciatis fugiat?\n            </p>\n        </div>\n        <div data-testid="view-2" className="p-20 w-full h-full bg-red-light">\n            <h3>View 2</h3>\n            <p>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                Blanditiis, ipsam. Itaque animi et odio? Cum, nihil officia.\n                Sint, perspiciatis fugiat?\n            </p>\n        </div>\n        <div data-testid="view-3" className="p-20 w-full h-full bg-green-light">\n            <h3>View 3</h3>\n            <p>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                Blanditiis, ipsam. Itaque animi et odio? Cum, nihil officia.\n                Sint, perspiciatis fugiat?\n            </p>\n        </div>\n    </Switcher>\n</div>;\n')),(0,r.kt)("p",null,"After the setup above, ",(0,r.kt)("inlineCode",{parentName:"p"},"setView()")," method returned from the ",(0,r.kt)("inlineCode",{parentName:"p"},"useSwitcher()")," hook, is the only method needed to change views (with transitions!)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"// Will transition the view to the second child of Switcher\nsetView(2);\n")),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"Switcher will automatically try to take up all the available space of a ",(0,r.kt)("inlineCode",{parentName:"li"},"position: relative")," parent (this can be overridden via sizing props or css)"),(0,r.kt)("li",{parentName:"ul"},"The parent will need explicit dimensions of some kind (for example, a ",(0,r.kt)("inlineCode",{parentName:"li"},"min-height"),").")))),(0,r.kt)("p",null,"For more information, see the Animation Section in the Components sidebar."))}d.isMDXComponent=!0}}]);